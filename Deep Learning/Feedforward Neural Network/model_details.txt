Model Information and Performance Details

1. ImprovedFNN Model
- Architecture:
  * Sequential Neural Network
  * Input Layer: Dense(128) with ReLU activation
  * Hidden Layers: Dense(64) and Dense(32) with dropout(0.3)
  * Output Layer: Dense(7) with softmax activation
- Parameters: 11,463 total trainable parameters
- Training Performance:
  * Best Validation Accuracy: 85.56%
  * Best Validation Loss: 0.2562
  * Training Time: 33.24 seconds
- Evaluation Metrics:
  * Accuracy: 0.83
  * Macro Average F1-score: 0.76
  * Weighted Average F1-score: 0.79

2. CNN Model
- Architecture:
  * Convolutional Neural Network
  * Conv1D Layer: 64 filters, kernel size 3
  * MaxPooling1D Layer
  * Dense Layer: 32 units
  * Output Layer: Dense(7) with softmax
- Parameters: 4,615 total trainable parameters
- Training Performance:
  * Best Validation Accuracy: 83.65%
  * Best Validation Loss: 0.3211
  * Training Time: ~35 seconds

3. LSTM Model
- Architecture:
  * Long Short-Term Memory Network
  * LSTM Layer: 64 units
  * Dropout: 0.2
  * Dense Layer: 32 units
  * Output Layer: Dense(7) with softmax
- Specialized for: Sequential data processing
- Training Performance:
  * Validation Accuracy: ~82%
  * Training Time: ~40 seconds

4. GRU Model
- Architecture:
  * Gated Recurrent Unit Network
  * GRU Layer: 64 units
  * Dropout: 0.2
  * Dense Layer: 32 units
  * Output Layer: Dense(7) with softmax
- Training Performance:
  * Accuracy: 0.809
  * Macro Average F1-score: 0.788
  * Weighted Average F1-score: 0.808
  * Training Time: 48.54 seconds

Comparative Analysis:
- Best Overall Model: ImprovedFNN
  * Highest validation accuracy
  * Best balance of performance and training time
  * Most stable training curves

- Model Comparison:
  * ImprovedFNN: Best overall performance (85.56% accuracy)
  * CNN: Good performance with fewer parameters (83.65% accuracy)
  * LSTM: Moderate performance, longer training time (~82% accuracy)
  * GRU: Good performance, longest training time (80.9% accuracy)

Visualization Files:
- Training history plots: *_history.png
- Confusion matrices: *_confusion_matrix.png
- Model architectures: DLFNN/NeuralNetwork/*_model_architecture.png
- Overall comparison: model_comparison.png
- Training efficiency: training_time_comparison.png

Note: All models were trained and evaluated on the same dataset with a 60/20/20 split for train/validation/test sets. The dataset includes various fault types with class distribution balanced using appropriate techniques.

C:\Users\OussamaTab\AppData\Local\Programs\Python\Python310\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Built ImprovedFNN model:
Model: "sequential_1"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃       
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩       
│ dense_3 (Dense)                      │ (None, 128)                 │             896 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dropout_2 (Dropout)                  │ (None, 128)                 │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_4 (Dense)                      │ (None, 64)                  │           8,256 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dropout_3 (Dropout)                  │ (None, 64)                  │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_5 (Dense)                      │ (None, 32)                  │           2,080 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_6 (Dense)                      │ (None, 7)                   │             231 │       
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘       
 Total params: 11,463 (44.78 KB)
 Trainable params: 11,463 (44.78 KB)
 Non-trainable params: 0 (0.00 B)

Training ImprovedFNN model...

Evaluation of ImprovedFNN model:
              precision    recall  f1-score   support

           0       0.99      0.99      0.99       477
           1       0.89      0.99      0.94       205
           3       0.98      0.95      0.97       210
           4       0.98      0.94      0.96       223
           5       0.50      1.00      0.66       222
           6       1.00      0.02      0.03       236

    accuracy                           0.83      1573
   macro avg       0.89      0.81      0.76      1573
weighted avg       0.91      0.83      0.79      1573

Confusion Matrix:
[[472   1   4   0   0   0]
 [  0 203   0   2   0   0]
 [  2   0 200   0   8   0]
 [  0  13   0 210   0   0]
 [  1   0   0   0 221   0]
 [  1  11   0   3 217   4]]
You must install graphviz (see instructions at https://graphviz.gitlab.io/download/) for `plot_model` to work.
C:\Users\OussamaTab\AppData\Local\Programs\Python\Python310\lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument 
to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Built CNN model:
Model: "sequential_2"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓       
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃       
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩       
│ conv1d (Conv1D)                      │ (None, 4, 64)               │             256 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ max_pooling1d (MaxPooling1D)         │ (None, 2, 64)               │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ flatten (Flatten)                    │ (None, 128)                 │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_7 (Dense)                      │ (None, 32)                  │           4,128 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_8 (Dense)                      │ (None, 7)                   │             231 │       
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘       
 Total params: 4,615 (18.03 KB)
 Trainable params: 4,615 (18.03 KB)
 Non-trainable params: 0 (0.00 B)

Training CNN model...
Evaluation of CNN model:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99       477
           1       0.89      0.99      0.93       205
           3       0.99      0.92      0.96       210
           4       0.95      0.93      0.94       223
           5       0.49      0.92      0.64       222
           6       0.37      0.04      0.08       236

    accuracy                           0.82      1573
   macro avg       0.78      0.80      0.76      1573
weighted avg       0.81      0.82      0.78      1573

Confusion Matrix:
[[475   1   1   0   0   0]
 [  1 202   0   2   0   0]
 [  5   0 193   0   9   3]
 [  0  14   0 208   0   1]
 [  2   0   0   2 205  13]
 [  1  11   0   6 208  10]]
You must install graphviz (see instructions at https://graphviz.gitlab.io/download/) for `plot_model` to work.
C:\Users\OussamaTab\AppData\Local\Programs\Python\Python310\lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument 
to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Built AdvancedCNN model:
Model: "sequential_3"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓       
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃       
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩       
│ conv1d_1 (Conv1D)                    │ (None, 6, 128)              │             512 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ max_pooling1d_1 (MaxPooling1D)       │ (None, 3, 128)              │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ conv1d_2 (Conv1D)                    │ (None, 3, 64)               │          24,640 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ global_average_pooling1d             │ (None, 64)                  │               0 │       
│ (GlobalAveragePooling1D)             │                             │                 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_9 (Dense)                      │ (None, 7)                   │             455 │       
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘       
 Total params: 25,607 (100.03 KB)
 Trainable params: 25,607 (100.03 KB)
 Non-trainable params: 0 (0.00 B)

Training AdvancedCNN model...
Evaluation of AdvancedCNN model:
              precision    recall  f1-score   support

           0       0.97      0.95      0.96       477
           1       0.84      0.98      0.90       205
           3       0.96      0.89      0.92       210
           4       0.93      0.95      0.94       223
           5       0.52      0.55      0.53       222
           6       0.48      0.43      0.45       236

    accuracy                           0.81      1573
   macro avg       0.78      0.79      0.78      1573
weighted avg       0.81      0.81      0.81      1573

Confusion Matrix:
[[452  19   6   0   0   0]
 [  3 201   1   0   0   0]
 [  8   0 186   0   0  16]
 [  0  12   0 211   0   0]
 [  2   1   0   3 122  94]
 [  1   7   0  13 114 101]]
You must install graphviz (see instructions at https://graphviz.gitlab.io/download/) for `plot_model` to work.
C:\Users\OussamaTab\AppData\Local\Programs\Python\Python310\lib\site-packages\keras\src\layers\rnn\rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(**kwargs)
Built LSTM model:
Model: "sequential_4"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃       
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩       
│ lstm (LSTM)                          │ (None, 64)                  │          16,896 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dropout_4 (Dropout)                  │ (None, 64)                  │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_10 (Dense)                     │ (None, 32)                  │           2,080 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_11 (Dense)                     │ (None, 7)                   │             231 │       
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘       
 Total params: 19,207 (75.03 KB)
 Trainable params: 19,207 (75.03 KB)
 Non-trainable params: 0 (0.00 B)

Training LSTM model...

Evaluation of LSTM model:
              precision    recall  f1-score   support

           0       0.96      0.99      0.98       477
           1       0.88      0.97      0.92       205
           3       0.99      0.88      0.93       210
           4       0.84      0.93      0.88       223
           5       0.48      0.78      0.59       222
           6       0.47      0.12      0.19       236

    accuracy                           0.80      1573
   macro avg       0.77      0.78      0.75      1573
weighted avg       0.80      0.80      0.78      1573

Confusion Matrix:
[[472   5   0   0   0   0]
 [  6 198   0   1   0   0]
 [ 13   0 185   0  12   0]
 [  0  13   0 207   3   0]
 [  0   0   1  17 173  31]
 [  0   9   1  22 176  28]]
You must install graphviz (see instructions at https://graphviz.gitlab.io/download/) for `plot_model` to work.
C:\Users\OussamaTab\AppData\Local\Programs\Python\Python310\lib\site-packages\keras\src\layers\rnn\rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(**kwargs)
Built GRU model:
Model: "sequential_5"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃       
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩       
│ gru (GRU)                            │ (None, 64)                  │          12,864 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dropout_5 (Dropout)                  │ (None, 64)                  │               0 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_12 (Dense)                     │ (None, 32)                  │           2,080 │       
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤       
│ dense_13 (Dense)                     │ (None, 7)                   │             231 │       
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘       
 Total params: 15,175 (59.28 KB)
 Trainable params: 15,175 (59.28 KB)
 Non-trainable params: 0 (0.00 B)

Training GRU model...
Evaluation of GRU model:
              precision    recall  f1-score   support

           0       0.98      0.91      0.95       477
           1       0.93      0.97      0.95       205
           3       0.86      0.93      0.90       210
           4       0.98      0.96      0.97       223
           5       0.47      0.66      0.55       222
           6       0.52      0.36      0.42       236

    accuracy                           0.81      1573
   macro avg       0.79      0.80      0.79      1573
weighted avg       0.82      0.81      0.81      1573

Confusion Matrix:
[[435  11  31   0   0   0]
 [  4 199   0   2   0   0]
 [  3   0 196   0  11   0]
 [  0   5   0 213   3   2]
 [  0   0   0   1 146  75]
 [  0   0   0   1 151  84]]
You must install graphviz (see instructions at https://graphviz.gitlab.io/download/) for `plot_model` to work.

Model Comparison:
         Model  Accuracy  Macro Avg F1  Weighted Avg F1  Training Time (s)
5          GRU  0.809282      0.788421         0.808391          48.535848
3  AdvancedCNN  0.809282      0.784587         0.807599         129.236545
0          FNN  0.835346      0.759896         0.787289          30.897104
1  ImprovedFNN  0.832804      0.758050         0.785890          33.236305
2          CNN  0.821996      0.755504         0.783912          39.096199
4         LSTM  0.802924      0.748209         0.776853          66.200010
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
Best model (GRU) saved to Deep Learning/Feedforward Neural Network/models\GRU.h5

Best model: GRU
Saved to: Deep Learning/Feedforward Neural Network/models\GRU.h5